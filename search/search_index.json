{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Enhance your game with scalable, dynamic code. Getting started"},{"location":"#introduction","title":"Introduction","text":"<p>Celesta is a library for Entity Component System (ECS) that adopts an event-driven approach to simplify development and reduce the complexity associated with traditional ECS loops.</p>"},{"location":"#components","title":"Components","text":"<p>Components in Celesta are defined simply and intuitively.   They are used to store data related to an entity. Here is an example of how to define components for health and regeneration:</p> <pre><code>type Value&lt;D&gt; = Celesta.Value&lt;D&gt;\n\nlocal Health = Celesta.Component {\n    max = 100 :: Value&lt;number&gt;,\n    current = 100 :: Value&lt;number&gt;\n}\n\nlocal Regeneration = Celesta.Component {\n    duration = 5 :: Value&lt;number&gt;,\n    amount = 10 :: Value&lt;number&gt;\n}\n</code></pre>"},{"location":"#query","title":"Query","text":"<p>The Query object is used to combine components that need to be considered in a system. It defines which components are required for a trait to function. Here is an example of defining a query between Health and Regeneration:</p> <pre><code>local Query = Celesta.Query(Health, Regeneration)\n</code></pre>"},{"location":"#traits","title":"Traits","text":"<p>Traits are functions that are executed when entities meet the requirements defined by the Query. They allow you to add custom logic and respond to changes in component states. Here\u2019s an example of a trait that regenerates an entity\u2019s health:</p> <pre><code>local Trait = Celesta.Trait(Query, function(world, entity, scope, health, regeneration)\n\n    local regenerating = task.spawn(function()\n\n        local endTime = os.clock() + regeneration.duration:Get()\n\n        while os.clock() &lt; endTime do\n            task.wait(1)\n\n            local current = health.current:Get()\n            local max = health.max:Get()\n\n            --// Add logic for health regeneration here\n\n        end\n\n    end)\n\n    --// Will be canceled when the trait is removed\n    table.insert(scope, regenerating)\n\nend)\n</code></pre>"}]}