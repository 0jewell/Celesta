{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Enhance your game with scalable, dynamic code. Getting started"},{"location":"#introduction","title":"Introduction","text":"<p>Celesta is a library for Entity Component System (ECS) that adopts an event-driven approach to simplify development and reduce the complexity associated with traditional ECS loops.</p>"},{"location":"#components","title":"Components","text":"<p>Components in Celesta are defined simply and intuitively.   They are used to store data related to an entity. Here is an example of how to define components for health and regeneration:</p> <pre><code>local Health = Celesta.Component {\n    max = 100,\n    current = 100\n}\n\nlocal Regeneration = Celesta.Component {\n    duration = 5,\n    amount = 10\n}\n</code></pre>"},{"location":"#query","title":"Query","text":"<p>The Query object is used to combine components that need to be considered in a system. It defines which components are required for a trait to function. Here is an example of defining a query between Health and Regeneration:</p> <pre><code>local Query = Celesta.Query(Health, Regeneration)\n</code></pre>"},{"location":"#traits","title":"Traits","text":"<p>Traits are functions that are executed when entities meet the requirements defined by the Query. They allow you to add custom logic and respond to changes in component states. Here\u2019s an example of a trait that regenerates an entity\u2019s health:</p> <pre><code>local Trait = Celesta.Trait(Query, function(world, entity, scope, health, regeneration)\n\n    local regenerating = task.spawn(function()\n\n        local endTime = os.clock() + regeneration.duration:Get()\n\n        while os.clock() &lt; endTime do\n            task.wait(1)\n\n            local current = health.current:Get()\n            local max = health.max:Get()\n\n            --// Add logic for health regeneration here \n        end\n    end)\n\n    --// Will be canceled when the trait is removed\n    table.insert(scope, regenerating)\nend)\n</code></pre>"},{"location":"Core%20Concepts/Components/","title":"Components","text":"<p>In Celesta, components are essential data structures associated with entities. They store the various attributes and states that define an entity's behavior and characteristics.</p>"},{"location":"Core%20Concepts/Components/#what-are-components","title":"What are Components?","text":"<p>Components are simple data containers attached to entities. They hold specific pieces of information related to an entity, such as position, health, or custom attributes. Components do not contain logic or behavior; instead, they purely represent data.</p> <pre><code>local Celesta = require(game.ReplicatedStorage.Celesta)\n\nlocal Velocity = Celesta.Component {\n    --// Default data for this component\n    current = 16\n}\n</code></pre> <p>Due to limitations in Luau, the type-checking is not done automatically, so we have to type-cast values in the data fields.</p> <pre><code>local Celesta = require(game.ReplicatedStorage.Celesta)\ntype Value&lt;D&gt; = Celesta.Value&lt;D&gt;\n\nlocal Velocity = Celesta.Component {\n    current = 16 :: Value&lt;number&gt;\n}\n</code></pre> <p>Luau type-checking</p> <p>Unfortunately, this approach may lead to type-cast errors. As a workaround, you might need to use <code>--!nocheck</code> at the beginning of the code to bypass these type-checking issues.</p> <p>Components don\u2019t necessarily need a default data; you can later add more fields or simply not use any.</p> <pre><code>local Celesta = require(game.ReplicatedStorage.Celesta)\n\nlocal Player = Celesta.Component()\n</code></pre> <p>Components that don't have any data are called tags. Tags can be anything; a marker that this entity is a player or even that this entity is a door.</p>"},{"location":"Learning/","title":"Get Started","text":""},{"location":"Learning/#intro","title":"Intro","text":"<p>Welcome to the Celesta guide! Here, we introduces an efficient solution for event-driven programming within Roblox.  </p> <p>This guide explores how Celesta optimizes entity management and component interaction. It is suitable for both newcomers and experienced developers looking to enhance their systems, providing insights and practical examples to fully leverage Celesta and elevate game projects.</p> <p>Still in development</p> <p>Celesta is currently very suitable for breaking changes. Its not recommended to use it for production.</p>"},{"location":"Learning/Contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Celesta! We want to evolve and achieve the best of Celesta, your participation in this is very important.</p>"},{"location":"Learning/Downloading/","title":"Downloading","text":"<p>In development.</p>"}]}